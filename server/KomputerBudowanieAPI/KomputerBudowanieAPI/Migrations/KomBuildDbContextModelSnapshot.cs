// <auto-generated />
using System;
using KomputerBudowanieAPI.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace KomputerBudowanieAPI.Migrations
{
    [DbContext(typeof(KomBuildDbContext))]
    partial class KomBuildDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("KomputerBudowanieAPI.Models.Case", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CaseType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Compatibility")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("ExpansionSlots")
                        .HasColumnType("integer");

                    b.Property<int>("ExternalBaysFivePointTwoFiveInch")
                        .HasColumnType("integer");

                    b.Property<int>("ExternalBaysThreePointFiveInch")
                        .HasColumnType("integer");

                    b.Property<bool>("HasAudioPort")
                        .HasColumnType("boolean");

                    b.Property<bool>("HasLightning")
                        .HasColumnType("boolean");

                    b.Property<bool>("HasMemoryCardReader")
                        .HasColumnType("boolean");

                    b.Property<bool>("HasMicrophonePort")
                        .HasColumnType("boolean");

                    b.Property<bool>("HasWindow")
                        .HasColumnType("boolean");

                    b.Property<float>("HeightCM")
                        .HasColumnType("real");

                    b.Property<int>("InternalBaysThreePointFiveInch")
                        .HasColumnType("integer");

                    b.Property<int>("InternalBaysTwoPointFiveInch")
                        .HasColumnType("integer");

                    b.Property<bool>("IsMuted")
                        .HasColumnType("boolean");

                    b.Property<float>("LengthCM")
                        .HasColumnType("real");

                    b.Property<float>("MaxCoolingSystemHeightCM")
                        .HasColumnType("real");

                    b.Property<float>("MaxGPULengthCM")
                        .HasColumnType("real");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PanelBottom")
                        .HasColumnType("text");

                    b.Property<string>("PanelFront")
                        .HasColumnType("text");

                    b.Property<string>("PanelRear")
                        .HasColumnType("text");

                    b.Property<string>("PanelSide")
                        .HasColumnType("text");

                    b.Property<string>("PanelTop")
                        .HasColumnType("text");

                    b.Property<string>("PowerSupply")
                        .HasColumnType("text");

                    b.Property<float?>("PowerSupplyPower")
                        .HasColumnType("real");

                    b.Property<string>("Producer")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProducerCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("USBThreeCount")
                        .HasColumnType("integer");

                    b.Property<int>("USBThreePointOneCount")
                        .HasColumnType("integer");

                    b.Property<int>("USBThreePointTwoCount")
                        .HasColumnType("integer");

                    b.Property<int>("USBTurboChargingCount")
                        .HasColumnType("integer");

                    b.Property<int>("USBTwoCount")
                        .HasColumnType("integer");

                    b.Property<int>("USBTypeCCount")
                        .HasColumnType("integer");

                    b.Property<float>("WeightKG")
                        .HasColumnType("real");

                    b.Property<float>("WidthCM")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("Cases");
                });

            modelBuilder.Entity("KomputerBudowanieAPI.Models.Cpu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AddedEquipment")
                        .HasColumnType("text");

                    b.Property<string>("Architecture")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("HasIncludedCooling")
                        .HasColumnType("boolean");

                    b.Property<bool>("HasUnlockedMultiplier")
                        .HasColumnType("boolean");

                    b.Property<string>("IntegratedGraphics")
                        .HasColumnType("text");

                    b.Property<string>("L1Cache")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("L2Cache")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("L3Cache")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Line")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ManufacturingProcess")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("MaxOperatingTempC")
                        .HasColumnType("integer");

                    b.Property<float>("MaxTurboFrequencyGHz")
                        .HasColumnType("real");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("NumberOfCores")
                        .HasColumnType("integer");

                    b.Property<int>("NumberOfThreads")
                        .HasColumnType("integer");

                    b.Property<float>("ProcessorBaseFrequencyGHz")
                        .HasColumnType("real");

                    b.Property<string>("ProcessorMicroarchitecture")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Producer")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProducerCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SocketType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SupportedMemoryTypes")
                        .HasColumnType("text");

                    b.Property<int>("TDPinW")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Cpus");
                });

            modelBuilder.Entity("KomputerBudowanieAPI.Models.CpuCooling", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<float?>("AirflowCFM")
                        .HasColumnType("real");

                    b.Property<string>("BaseMaterial")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ColorElement")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<float>("DepthMM")
                        .HasColumnType("real");

                    b.Property<int>("FanCount")
                        .HasColumnType("integer");

                    b.Property<int>("FanDiameterMM")
                        .HasColumnType("integer");

                    b.Property<bool>("HasLighting")
                        .HasColumnType("boolean");

                    b.Property<int>("HeatPipeDiameterMM")
                        .HasColumnType("integer");

                    b.Property<int>("HeatPipesCount")
                        .HasColumnType("integer");

                    b.Property<float>("HeightMM")
                        .HasColumnType("real");

                    b.Property<int?>("LifespanHours")
                        .HasColumnType("integer");

                    b.Property<int?>("MaxFanSpeedPerMin")
                        .HasColumnType("integer");

                    b.Property<float?>("MaxNoiseLevelinDBA")
                        .HasColumnType("real");

                    b.Property<int?>("MaxTDPinW")
                        .HasColumnType("integer");

                    b.Property<string>("MountingType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProcessorSocket")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Producer")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProducerCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("WeightGrams")
                        .HasColumnType("integer");

                    b.Property<float>("WidthMM")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("CpuCoolings");
                });

            modelBuilder.Entity("KomputerBudowanieAPI.Models.GraphicCard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BoostClockMHz")
                        .HasColumnType("integer");

                    b.Property<int>("CardLengthMM")
                        .HasColumnType("integer");

                    b.Property<string>("CardLinking")
                        .HasColumnType("text");

                    b.Property<string>("ChipsetProducer")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ChipsetType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ConnectorType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CoolingType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("CoreClockMHz")
                        .HasColumnType("integer");

                    b.Property<int>("DSub")
                        .HasColumnType("integer");

                    b.Property<int>("DVI")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("DisplayPortCount")
                        .HasColumnType("integer");

                    b.Property<int>("FanCount")
                        .HasColumnType("integer");

                    b.Property<int>("HDMI")
                        .HasColumnType("integer");

                    b.Property<bool>("HasDLSS3Support")
                        .HasColumnType("boolean");

                    b.Property<bool>("HasLEDLighting")
                        .HasColumnType("boolean");

                    b.Property<int>("MemoryBusWidthBits")
                        .HasColumnType("integer");

                    b.Property<int>("MemoryClockMHz")
                        .HasColumnType("integer");

                    b.Property<int>("MemorySizeGB")
                        .HasColumnType("integer");

                    b.Property<string>("MemoryType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("MiniDisplayPort")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PowerConnectors")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.Property<string>("Producer")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProducerCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ROPUnits")
                        .HasColumnType("integer");

                    b.Property<int>("RTCores")
                        .HasColumnType("integer");

                    b.Property<int>("RecommendedPSUCapacityW")
                        .HasColumnType("integer");

                    b.Property<string>("Resolution")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("StreamProcessors")
                        .HasColumnType("integer");

                    b.Property<int>("TensorCores")
                        .HasColumnType("integer");

                    b.Property<int>("TextureUnits")
                        .HasColumnType("integer");

                    b.Property<int>("USBC")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("GraphicCards");
                });

            modelBuilder.Entity("KomputerBudowanieAPI.Models.Motherboard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AudioChannels")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("BoardStandard")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CPUSocket")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CardLinking")
                        .HasColumnType("text");

                    b.Property<string>("ChannelArchitecture")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Chipset")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<float>("DepthMM")
                        .HasColumnType("real");

                    b.Property<string>("DriveConnectors")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ExpansionSlots")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("GraphicsChipset")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("HasIntegratedGraphicsSupport")
                        .HasColumnType("boolean");

                    b.Property<string>("IncludedAccessories")
                        .HasColumnType("text");

                    b.Property<string>("IntegratedNetworkCard")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("InternalConnectors")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("MaxMemoryGB")
                        .HasColumnType("integer");

                    b.Property<string>("MemoryConnectorType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("MemorySlotsCount")
                        .HasColumnType("integer");

                    b.Property<string>("MemoryStandard")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NetworkChipset")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Producer")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProducerCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RAIDController")
                        .HasColumnType("text");

                    b.Property<string>("RearPanelConnectors")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SoundChipset")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SupportedMemoryFreq")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SupportedProcessors")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<float>("WidthMM")
                        .HasColumnType("real");

                    b.Property<string>("WirelessSupport")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Motherboards");
                });

            modelBuilder.Entity("KomputerBudowanieAPI.Models.PcConfiguration", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int?>("CaseId")
                        .HasColumnType("integer");

                    b.Property<int?>("CpuCoolingId")
                        .HasColumnType("integer");

                    b.Property<int?>("CpuId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int?>("GraphicCardId")
                        .HasColumnType("integer");

                    b.Property<int?>("MotherboardId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int?>("PowerSupplyId")
                        .HasColumnType("integer");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.Property<int?>("WaterCoolingId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CaseId");

                    b.HasIndex("CpuCoolingId");

                    b.HasIndex("CpuId");

                    b.HasIndex("GraphicCardId");

                    b.HasIndex("MotherboardId");

                    b.HasIndex("PowerSupplyId");

                    b.HasIndex("UserId");

                    b.HasIndex("WaterCoolingId");

                    b.ToTable("PcConfigurations");
                });

            modelBuilder.Entity("KomputerBudowanieAPI.Models.PcConfigurationRam", b =>
                {
                    b.Property<Guid>("PcConfigurationsId")
                        .HasColumnType("uuid");

                    b.Property<int>("RamsId")
                        .HasColumnType("integer");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.HasKey("PcConfigurationsId", "RamsId");

                    b.HasIndex("RamsId");

                    b.ToTable("PcConfigurationRam");
                });

            modelBuilder.Entity("KomputerBudowanieAPI.Models.PcConfigurationStorage", b =>
                {
                    b.Property<Guid>("PcConfigurationsId")
                        .HasColumnType("uuid");

                    b.Property<int>("StoragesId")
                        .HasColumnType("integer");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.HasKey("PcConfigurationsId", "StoragesId");

                    b.HasIndex("StoragesId");

                    b.ToTable("PcConfigurationStorage");
                });

            modelBuilder.Entity("KomputerBudowanieAPI.Models.PowerSupply", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ATX24Pin_20Plus4")
                        .HasColumnType("integer");

                    b.Property<int>("CPU4Pin")
                        .HasColumnType("integer");

                    b.Property<int>("CPU8Pin")
                        .HasColumnType("integer");

                    b.Property<int>("CPU8Pin_4Plus4")
                        .HasColumnType("integer");

                    b.Property<string>("Certificate")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Cooling")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("DepthMM")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("EfficiencyRating")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("FanDiameterMM")
                        .HasColumnType("integer");

                    b.Property<string>("FormFactor")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("HasLighting")
                        .HasColumnType("boolean");

                    b.Property<int>("HeightMM")
                        .HasColumnType("integer");

                    b.Property<string>("ModularCabling")
                        .HasColumnType("text");

                    b.Property<int>("Molex")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PCIE16Pin")
                        .HasColumnType("integer");

                    b.Property<int>("PCIE6Pin")
                        .HasColumnType("integer");

                    b.Property<int>("PCIE8Pin")
                        .HasColumnType("integer");

                    b.Property<int>("PCIE8Pin_6Plus2")
                        .HasColumnType("integer");

                    b.Property<string>("PowerFactorCorrection")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PowerW")
                        .HasColumnType("integer");

                    b.Property<string>("Producer")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProducerCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Sata")
                        .HasColumnType("integer");

                    b.Property<string>("Security")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("WidthMM")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("PowerSupplies");
                });

            modelBuilder.Entity("KomputerBudowanieAPI.Models.Ram", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CapacityGB")
                        .HasColumnType("integer");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Cooling")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("FrequencyMHz")
                        .HasColumnType("integer");

                    b.Property<bool>("HasLighting")
                        .HasColumnType("boolean");

                    b.Property<int>("LatencyCL")
                        .HasColumnType("integer");

                    b.Property<bool>("LowProfile")
                        .HasColumnType("boolean");

                    b.Property<string>("MemoryType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ModuleCount")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OverclockingProfile")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PinType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Producer")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProducerCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<float>("VoltageV")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("Rams");
                });

            modelBuilder.Entity("KomputerBudowanieAPI.Models.ShopPrice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CaseId")
                        .HasColumnType("integer");

                    b.Property<int?>("CpuCoolingId")
                        .HasColumnType("integer");

                    b.Property<int?>("CpuId")
                        .HasColumnType("integer");

                    b.Property<int?>("FanId")
                        .HasColumnType("integer");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("MotherboardId")
                        .HasColumnType("integer");

                    b.Property<int?>("PowerSupplyId")
                        .HasColumnType("integer");

                    b.Property<double>("Price")
                        .HasColumnType("double precision");

                    b.Property<int?>("RamId")
                        .HasColumnType("integer");

                    b.Property<string>("ShopName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("StorageId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CaseId");

                    b.HasIndex("CpuCoolingId");

                    b.HasIndex("CpuId");

                    b.HasIndex("FanId");

                    b.HasIndex("MotherboardId");

                    b.HasIndex("PowerSupplyId");

                    b.HasIndex("RamId");

                    b.HasIndex("StorageId");

                    b.ToTable("ShopPrice");
                });

            modelBuilder.Entity("KomputerBudowanieAPI.Models.Storage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CacheMemory")
                        .HasColumnType("text");

                    b.Property<string>("Capacity")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Controler")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("FormFactor")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool?>("HardwareEncryption")
                        .HasColumnType("boolean");

                    b.Property<string>("Interface")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Key")
                        .HasColumnType("text");

                    b.Property<string>("Longevity")
                        .HasColumnType("text");

                    b.Property<string>("MemoryChipType")
                        .HasColumnType("text");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<float?>("NoiseLevelDB")
                        .HasColumnType("real");

                    b.Property<string>("Producer")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProducerCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool?>("Radiator")
                        .HasColumnType("boolean");

                    b.Property<int?>("ReadRandomIOPS")
                        .HasColumnType("integer");

                    b.Property<int?>("ReadSpeedMBs")
                        .HasColumnType("integer");

                    b.Property<int?>("RotatingSpeedRPM")
                        .HasColumnType("integer");

                    b.Property<string>("TBW")
                        .HasColumnType("text");

                    b.Property<float?>("ThiccnessMM")
                        .HasColumnType("real");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<float?>("WeightG")
                        .HasColumnType("real");

                    b.Property<int?>("WriteRandomIOPS")
                        .HasColumnType("integer");

                    b.Property<int?>("WriteSpeedMBs")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Storages");
                });

            modelBuilder.Entity("KomputerBudowanieAPI.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NickName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("KomputerBudowanieAPI.Models.WaterCooling", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AMDCompatibility")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FanConnector")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("FanCount")
                        .HasColumnType("integer");

                    b.Property<int>("FanDiameterMM")
                        .HasColumnType("integer");

                    b.Property<bool>("HasPWMControl")
                        .HasColumnType("boolean");

                    b.Property<string>("IntelCompatibility")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LEDConnector")
                        .HasColumnType("text");

                    b.Property<string>("Lighting")
                        .HasColumnType("text");

                    b.Property<float?>("MaxAirflowCFM")
                        .HasColumnType("real");

                    b.Property<int>("MaxFanSpeedRPM")
                        .HasColumnType("integer");

                    b.Property<float?>("MaxNoiseLevelDBa")
                        .HasColumnType("real");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.Property<string>("Producer")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProducerCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PumpConnector")
                        .HasColumnType("text");

                    b.Property<float>("RadiatorHeightMM")
                        .HasColumnType("real");

                    b.Property<float>("RadiatorLengthMM")
                        .HasColumnType("real");

                    b.Property<float>("RadiatorSizeMM")
                        .HasColumnType("real");

                    b.Property<float>("RadiatorWidthMM")
                        .HasColumnType("real");

                    b.Property<int?>("WeightG")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("WaterCoolings");
                });

            modelBuilder.Entity("KomputerBudowanieAPI.Models.PcConfiguration", b =>
                {
                    b.HasOne("KomputerBudowanieAPI.Models.Case", "Case")
                        .WithMany("Configurations")
                        .HasForeignKey("CaseId");

                    b.HasOne("KomputerBudowanieAPI.Models.CpuCooling", "CpuCooling")
                        .WithMany("Configurations")
                        .HasForeignKey("CpuCoolingId");

                    b.HasOne("KomputerBudowanieAPI.Models.Cpu", "Cpu")
                        .WithMany("Configurations")
                        .HasForeignKey("CpuId");

                    b.HasOne("KomputerBudowanieAPI.Models.GraphicCard", "GraphicCard")
                        .WithMany("Configurations")
                        .HasForeignKey("GraphicCardId");

                    b.HasOne("KomputerBudowanieAPI.Models.Motherboard", "Motherboard")
                        .WithMany("Configurations")
                        .HasForeignKey("MotherboardId");

                    b.HasOne("KomputerBudowanieAPI.Models.PowerSupply", "PowerSupply")
                        .WithMany("Configurations")
                        .HasForeignKey("PowerSupplyId");

                    b.HasOne("KomputerBudowanieAPI.Models.User", "User")
                        .WithMany("Configurations")
                        .HasForeignKey("UserId");

                    b.HasOne("KomputerBudowanieAPI.Models.WaterCooling", "WaterCooling")
                        .WithMany("Configurations")
                        .HasForeignKey("WaterCoolingId");

                    b.Navigation("Case");

                    b.Navigation("Cpu");

                    b.Navigation("CpuCooling");

                    b.Navigation("GraphicCard");

                    b.Navigation("Motherboard");

                    b.Navigation("PowerSupply");

                    b.Navigation("User");

                    b.Navigation("WaterCooling");
                });

            modelBuilder.Entity("KomputerBudowanieAPI.Models.PcConfigurationRam", b =>
                {
                    b.HasOne("KomputerBudowanieAPI.Models.PcConfiguration", "PcConfiguration")
                        .WithMany("PcConfigurationRams")
                        .HasForeignKey("PcConfigurationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KomputerBudowanieAPI.Models.Ram", "Ram")
                        .WithMany("PcConfigurationRams")
                        .HasForeignKey("RamsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PcConfiguration");

                    b.Navigation("Ram");
                });

            modelBuilder.Entity("KomputerBudowanieAPI.Models.PcConfigurationStorage", b =>
                {
                    b.HasOne("KomputerBudowanieAPI.Models.PcConfiguration", "PcConfiguration")
                        .WithMany("PcConfigurationStorages")
                        .HasForeignKey("PcConfigurationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KomputerBudowanieAPI.Models.Storage", "Storage")
                        .WithMany("PcConfigurationStorages")
                        .HasForeignKey("StoragesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PcConfiguration");

                    b.Navigation("Storage");
                });

            modelBuilder.Entity("KomputerBudowanieAPI.Models.Case", b =>
                {
                    b.Navigation("Configurations");

                    b.Navigation("Prices");
                });

            modelBuilder.Entity("KomputerBudowanieAPI.Models.Cpu", b =>
                {
                    b.Navigation("Configurations");

                    b.Navigation("Prices");
                });

            modelBuilder.Entity("KomputerBudowanieAPI.Models.CpuCooling", b =>
                {
                    b.Navigation("Configurations");

                    b.Navigation("Prices");
                });

            modelBuilder.Entity("KomputerBudowanieAPI.Models.Fan", b =>
                {
                    b.Navigation("Prices");
                });

            modelBuilder.Entity("KomputerBudowanieAPI.Models.GraphicCard", b =>
                {
                    b.Navigation("Configurations");
                });

            modelBuilder.Entity("KomputerBudowanieAPI.Models.Motherboard", b =>
                {
                    b.Navigation("Configurations");

                    b.Navigation("Prices");
                });

            modelBuilder.Entity("KomputerBudowanieAPI.Models.PcConfiguration", b =>
                {
                    b.Navigation("PcConfigurationRams");

                    b.Navigation("PcConfigurationStorages");
                });

            modelBuilder.Entity("KomputerBudowanieAPI.Models.PowerSupply", b =>
                {
                    b.Navigation("Configurations");

                    b.Navigation("Prices");
                });

            modelBuilder.Entity("KomputerBudowanieAPI.Models.Ram", b =>
                {
                    b.Navigation("Prices");
                });

            modelBuilder.Entity("KomputerBudowanieAPI.Models.Storage", b =>
                {
                    b.Navigation("Prices");
                });

            modelBuilder.Entity("KomputerBudowanieAPI.Models.Ram", b =>
                {
                    b.Navigation("PcConfigurationRams");
                });

            modelBuilder.Entity("KomputerBudowanieAPI.Models.Storage", b =>
                {
                    b.Navigation("PcConfigurationStorages");
                });

            modelBuilder.Entity("KomputerBudowanieAPI.Models.User", b =>
                {
                    b.Navigation("Configurations");
                });

            modelBuilder.Entity("KomputerBudowanieAPI.Models.WaterCooling", b =>
                {
                    b.Navigation("Configurations");
                });
#pragma warning restore 612, 618
        }
    }
}
